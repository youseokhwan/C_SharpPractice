Chapter 4 - 데이터 타입 고급

Swift는 엄격한 타입을 통해 안정성(Safe) 추구

typealias
- typealias를 통해 별칭 사용 가능

Tuple
- 파이썬의 튜플과 유사함
- tuple.0, tuple.1과 같이 인덱스를 프로퍼티로 사용 가능
- 혹은 타입 선언 혹은 typealias를 통해 이름 지정하여 사용 가능
ex)
typealias MyTuple = (name: String, age: Int)
var tuple: MyTuple = ("you", 25)

Array
- Swift의 Array는 C언어처럼 Buffer이기는 하나 요소의 삽입, 삭제가 자유로움(크기 조절이 자유로움)
- 표현은 똑같이 []를 사용하지만 컬렉션 형의 특징을 모두 가지고 있음(사용하기 편함)
- [String]은 Array<String>과 같은 표현임

Dictionary
- 파이썬의 Dictionary와 유사함
- Array에서 []를 사용했던 것처럼 Dictionary는 [:]를 통해 축약할 수 있음

Set
- Set 또한 위와 유사함
- Set는 축약형이 없음
- 집합관계, 포함관계 연산 가능

열거형
- 기존 C언어에서 열거형은 주로 정수의 별칭으로만 사용됨
- Swift는 각 값이 고유의 타입을 가질 수 있어 실수할 확률을 줄임
- enum과 case 키워드 사용하여 정의
- rawValue로 원시 값 참조 가능(원시 값은 필수는 아님)
- 모든 case를 순회해야 할 때는 CaseIterable 프로토콜을 채택한다.
