Chapter 5 - 연산자

Swift는 연산자 또한 함수여서 연산자 오버로딩을 할 수 있다.

*로 나열한 항목은 다른 프로그래밍 언어와 동일하거나 매우 유사한 항목임

* 단항, 이항, 삼항 연산자 개념
* 전위, 중위, 후위 연산자 개념
* 할당 연산자(=)
* 산술 연산자(+, -, *, /, %)

Swift의 경우 실수의 나머지 연산도 지원한다.
% 연산자로 지원하는 것은 아니고, truncatingRemainer() 메서드를 통해 지원한다.

* 비교 연산자(==, >=, <=, >, <, !=)

===와 !==는 참조 타입일 때, 같은 참조인지 비교하여 bool 값을 반환한다.
~=는 패턴이 일치하는지 비교하여 bool 값을 반환한다.

* 삼항 연산자(? :)

범위 연산자는 포스팅을 통해 따로 정리

* 불 연산자(!A, A && B, A || B)
* 비트 연산자(~, &, |, ^, >>, <<)

* 복합 할당 연산자(+=, -=, *=, /=, %=, <<=, >>=, &=, |=, ^=)

오버플로 연산자를 사용하면 오버플로를 가능하게 한다.
&+, &-, &*
&/의 경우 0으로 나눌 경우 0을 반환한다. -> 2014년 블로그 포스팅에서 확인한 내용인데 없어진 건지 레퍼런스에는 없다. Cannot find operator '&/' in scope.
해당 블로그(http://minsone.github.io/mac/ios/swift-advanced-operators-summary)

아래 4개 연산자는 Kotlin에서 익힌 내용이지만 용어가 달라서 따로 정리함
- nil 병합 연산자(A ?? B): A가 nil이 아니면 A를 반환하고, nil이면 B를 반환
- 옵셔널 강제 추출 연산자(A!): 옵셔널 개체(A)의 값을 강제로 추출
- 옵셔널 연산자(A?): 옵셔널 값(A)를 안전하게 추출하거나, A가 옵셔널임을 표현

우선순위(Precedence): 우선순위가 높은 연산자가 먼저 실행됨
결합방향(Associativity): 같은 우선순위의 연산자끼리 나열되었을 때 어떤 방향부터 결합할 것인지 정함
예를 들어 결합방향이 left면 1 + 2 + 3 + 4는 (((1 + 2) + 3) + 4)로 묶임

사용자 정의 연산자
- =와 ?:를 제외하고 연산자의 역할을 변경하거나 새로운 기능을 추가할 수 있음
- 전위(prefix), 중위(infix), 후위(postfix) 중 어떤 연산자인지 파악해야 함
- 연산자를 먼저 정의한 후 구현하는 순서임
~~~
prefix operator ** // prefix는 전위

prefix func ** (value: Int) -> Int {
    return value * value
}
~~~
- 중위 연산자의 경우 precedencegroup을 지정할 수 있음
~~~
infix operator ** : MultiplicationPrecedence
~~~
